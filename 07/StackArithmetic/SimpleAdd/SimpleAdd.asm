// Generated by Nand2Tetris VM translator written by Jesse Evers
// File: ../StackArithmetic/SimpleAdd/SimpleAdd.asm

// Initialize stack pointer
@256
D=A
@SP
M=D

// Begin user-defined program
@SP
M=M+1
@7
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@8
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_0
D=A
@R13
M=D
@__ADD_OP
0;JMP
(POST_ARITH_CALL_0)
// End user-defined program

// This terminates the program by sending it into an infinite loop
(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP

(__ADD_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=D+M
M=D
@__END_ARITH_OP
0;JMP

(__SUB_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=D-M
M=D
@__END_ARITH_OP
0;JMP

(__EQ_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_ARITH_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JEQ
@__FALSE
0;JMP

(__GT_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_ARITH_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JGT
@__FALSE
0;JMP

(__LT_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_ARITH_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JLT
@__FALSE
0;JMP

(__AND_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M&D
@__END_ARITH_OP
0;JMP

(__OR_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M|D
@__END_ARITH_OP
0;JMP

(__NEG_OP)
@SP
A=M-1
M=-M
@__END_ARITH_OP
0;JMP

(__NOT_OP)
@SP
A=M-1
M=!M
@__END_ARITH_OP
0;JMP

(__END_ARITH_OP)
@R13
A=M
0;JMP

(__TRUE)
@SP
A=M-1
M=1
@R14
A=M
0;JMP
(__FALSE)
@SP
A=M-1
M=0
@R14
A=M
0;JMP
