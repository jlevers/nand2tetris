// Generated by Nand2Tetris VM translator written by Jesse Evers
// File: ../StackArithmetic/StackTest/StackTest.asm

// Initialize stack pointer
@256
D=A
@SP
M=D

// Begin user-defined program
@SP
M=M+1
@17
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@17
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_0
D=A
@R13
M=D
@__EQ_OP
0;JMP
(POST_ARITH_CALL_0)
@SP
M=M+1
@17
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@16
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_1
D=A
@R13
M=D
@__EQ_OP
0;JMP
(POST_ARITH_CALL_1)
@SP
M=M+1
@16
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@17
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_2
D=A
@R13
M=D
@__EQ_OP
0;JMP
(POST_ARITH_CALL_2)
@SP
M=M+1
@892
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@891
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_3
D=A
@R13
M=D
@__LT_OP
0;JMP
(POST_ARITH_CALL_3)
@SP
M=M+1
@891
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@892
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_4
D=A
@R13
M=D
@__LT_OP
0;JMP
(POST_ARITH_CALL_4)
@SP
M=M+1
@891
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@891
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_5
D=A
@R13
M=D
@__LT_OP
0;JMP
(POST_ARITH_CALL_5)
@SP
M=M+1
@32767
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@32766
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_6
D=A
@R13
M=D
@__GT_OP
0;JMP
(POST_ARITH_CALL_6)
@SP
M=M+1
@32766
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@32767
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_7
D=A
@R13
M=D
@__GT_OP
0;JMP
(POST_ARITH_CALL_7)
@SP
M=M+1
@32766
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@32766
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_8
D=A
@R13
M=D
@__GT_OP
0;JMP
(POST_ARITH_CALL_8)
@SP
M=M+1
@57
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@31
D=A
@SP
A=M-1
M=D
@SP
M=M+1
@53
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_9
D=A
@R13
M=D
@__ADD_OP
0;JMP
(POST_ARITH_CALL_9)
@SP
M=M+1
@112
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_10
D=A
@R13
M=D
@__SUB_OP
0;JMP
(POST_ARITH_CALL_10)
@POST_ARITH_CALL_11
D=A
@R13
M=D
@__NEG_OP
0;JMP
(POST_ARITH_CALL_11)
@POST_ARITH_CALL_12
D=A
@R13
M=D
@__AND_OP
0;JMP
(POST_ARITH_CALL_12)
@SP
M=M+1
@82
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_13
D=A
@R13
M=D
@__OR_OP
0;JMP
(POST_ARITH_CALL_13)
@POST_ARITH_CALL_14
D=A
@R13
M=D
@__NOT_OP
0;JMP
(POST_ARITH_CALL_14)
// End user-defined program

// This terminates the program by sending it into an infinite loop
(__INFINITE_LOOP)
@__INFINITE_LOOP
0;JMP

(__ADD_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=M+D
M=D
@__END_ARITH_OP
0;JMP

(__SUB_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=M-D
M=D
@__END_ARITH_OP
0;JMP

(__EQ_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_ARITH_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JEQ
@__FALSE
0;JMP

(__GT_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_ARITH_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JGT
@__FALSE
0;JMP

(__LT_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_ARITH_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JLT
@__FALSE
0;JMP

(__AND_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M&D
@__END_ARITH_OP
0;JMP

(__OR_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M|D
@__END_ARITH_OP
0;JMP

(__NEG_OP)
@SP
A=M-1
M=-M
@__END_ARITH_OP
0;JMP

(__NOT_OP)
@SP
A=M-1
M=!M
@__END_ARITH_OP
0;JMP

(__END_ARITH_OP)
@R13
A=M
0;JMP

(__TRUE)
@SP
A=M-1
M=-1
@R14
A=M
0;JMP
(__FALSE)
@SP
A=M-1
M=0
@R14
A=M
0;JMP
