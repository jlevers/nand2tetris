// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero x and y if needed
    Mux16(a=x, b[0..15]=false, sel=zx, out=xmux1);
    Mux16(a=y, b[0..15]=false, sel=zy, out=ymux1);

    // Negate x and y if needed
    Not16(in=xmux1, out=negx);
    Not16(in=ymux1, out=negy);

    // Choose negated or unchanged x and y values
    Mux16(a=xmux1, b=negx, sel=nx, out=xmux2);
    Mux16(a=ymux1, b=negy, sel=ny, out=ymux2);

    // Create anded and added versions of the modified inputs
    Add16(a=xmux2, b=ymux2, out=added);
    And16(a=xmux2, b=ymux2, out=anded);

    // Choose between added and anded
    Mux16(a=anded, b=added, sel=f, out=preout);

    // Create a negated version of the output
    Not16(in=preout, out=negout);

    // Choose between the regular and negated output, and create a working copy
    // of the result of that decision
    Mux16(a=preout, b=negout, sel=no, out=out);
    Mux16(a=preout, b=negout, sel=no, out=outcomp);

    // Check if the output is 0
    Or16Way(in=outcomp, out=notzr);
    Not(in=notzr, out=zr);

    // Check if the output is negative
    Neg16Way(in=outcomp, out=ng);
}
