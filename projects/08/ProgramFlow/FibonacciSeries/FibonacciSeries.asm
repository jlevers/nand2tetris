// Generated by Nand2Tetris VM translator (written by Jesse Evers)
// File: ../ProgramFlow/FibonacciSeries/FibonacciSeries.asm

// Initialize stack pointer
@256
D=A
@SP
M=D

// Begin user-defined program

@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
@SP
AM=M-1
D=M
@4
M=D
@SP
M=M+1
@0
D=A
@SP
A=M-1
M=D
@THAT
D=M
@0
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
@SP
M=M+1
@1
D=A
@SP
A=M-1
M=D
@THAT
D=M
@1
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
@SP
M=M+1
@2
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_0
D=A
@R13
M=D
@__SUB_OP
0;JMP
(POST_ARITH_CALL_0)
@ARG
D=M
@0
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(default:MAIN_LOOP_START)
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
@SP
AM=M-1
D=M
@default:COMPUTE_ELEMENT
D;JNE
@default:END_PROGRAM
0;JMP
(default:COMPUTE_ELEMENT)
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
@POST_ARITH_CALL_1
D=A
@R13
M=D
@__ADD_OP
0;JMP
(POST_ARITH_CALL_1)
@THAT
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
@4
D=M
@SP
M=M+1
A=M-1
M=D
@SP
M=M+1
@1
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_2
D=A
@R13
M=D
@__ADD_OP
0;JMP
(POST_ARITH_CALL_2)
@SP
AM=M-1
D=M
@4
M=D
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
@SP
M=M+1
@1
D=A
@SP
A=M-1
M=D
@POST_ARITH_CALL_3
D=A
@R13
M=D
@__SUB_OP
0;JMP
(POST_ARITH_CALL_3)
@ARG
D=M
@0
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
@default:MAIN_LOOP_START
0;JMP
(default:END_PROGRAM)
// End user-defined program

// This terminates the program by sending it into an infinite loop
(__INFINITE_LOOP)
@__INFINITE_LOOP
0;JMP

(__ADD_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=M+D
M=D
@__END_OP
0;JMP

(__SUB_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=M-D
M=D
@__END_OP
0;JMP

(__EQ_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JEQ
@__FALSE
0;JMP

(__GT_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JGT
@__FALSE
0;JMP

(__LT_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@__END_OP
D=A
@R14
M=D
@SP
A=M-1
D=M
@__TRUE
D;JLT
@__FALSE
0;JMP

(__AND_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M&D
@__END_OP
0;JMP

(__OR_OP)
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M|D
@__END_OP
0;JMP

(__NEG_OP)
@SP
A=M-1
M=-M
@__END_OP
0;JMP

(__NOT_OP)
@SP
A=M-1
M=!M
@__END_OP
0;JMP

(__END_OP)
@R13
A=M
0;JMP

(__TRUE)
@SP
A=M-1
M=-1
@R14
A=M
0;JMP
(__FALSE)
@SP
A=M-1
M=0
@R14
A=M
0;JMP

