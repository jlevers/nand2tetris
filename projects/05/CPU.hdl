// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Load either an address or an instruction, based on the first bit of instruction
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inRegA);
    Not(in=instruction[15], out=Ainstruction);
    Or(a=Ainstruction, b=instruction[5], out=loadRegA);
    ARegister(in=inRegA, load=loadRegA, out=outRegA);

    // If this is a C-instruction, load into register D if necessary
    And(a=instruction[4], b=instruction[15], out=loadRegD);
    DRegister(in=outALU, load=loadRegD, out=outRegD);

    // Pass A or M into the ALU
    Mux16(a=outRegA, b=inM, sel=instruction[12], out=outAddrOrInstr);
    ALU(x=outRegD, y=outAddrOrInstr, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zero, ng=neg);

    Or(a=zero, b=neg, out=notpos);
    Not(in=notpos, out=pos);

    And(a=neg, b=instruction[2], out=negCorrect);
    And(a=zero, b=instruction[1], out=zeroCorrect);
    And(a=pos, b=instruction[0], out=posCorrect);

    Or(a=negCorrect, b=zeroCorrect, out=partial);
    Or(a=posCorrect, b=partial, out=anyCorrect);

    // Process any jumps
    And(a=anyCorrect, b=instruction[15], out=jump);
    PC(in=outRegA, load=jump, inc=true, reset=reset, out[0..14]=pc);

    // Create outputs
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or16(a=outRegA, b=outRegA, out[0..14]=addressM);
    And(a=instruction[3], b=instruction[15], out=loadOutM);
    Mux16(a[0..15]=false, b=outALU, sel=loadOutM, out=outM);
}
